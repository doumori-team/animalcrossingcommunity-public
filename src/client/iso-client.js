import qs from 'qs';

import * as errors from '../common/errors.ts';

/**
 * iso, iso-client, iso-server need to remain .js files for webpack to bundle correctly.
 */
export function query(userId, method, params = {})
{
	return new Promise((resolve, reject) =>
	{
		const xhr = new XMLHttpRequest;

		xhr.onreadystatechange = () =>
		{
			if (xhr.readyState !== XMLHttpRequest.DONE)
			{
				return;
			}

			if (xhr.responseText.includes('Offline for Maintenance'))
			{
				reject({
					name: 'MaintenanceMode',
					message: `Sorry for the inconvenience, but weâ€™re performing some maintenance at the moment. If you need to, you can always <a href="mailto:support@animalcrossingcommunity.com">contact us</a>, or reach out to us on <a target='_blank' href='https://www.facebook.com/animalcrossingcommunity/'>Facebook</a> or <a target='_blank' href='https://twitter.com/accommunity'>Twitter</a>!`,
					code: 503,
				});
			}
			else
			{
				try
				{
					const response = JSON.parse(xhr.responseText);

					if (xhr.status === 200)
					{
						resolve(response);
					}
					else
					{
						if (Object.prototype.hasOwnProperty.call(response, '_errors'))
						{
							reject(new errors.UserError(...response._errors));
						}
						else
						{
							reject('An unknown error has occurred.');
						}
					}
				}
				catch
				{
					reject(new errors.UserError('bad-format'));
				}
			}
		};

		// this allows our CDN to cache the GET results for visitors
		let httpMethod = 'GET';
		let url = '/api/' + method;

		if (params instanceof FormData)
		{
			httpMethod = 'POST';
		}
		else if (!['v1/treasure/jackpot'].some(m => method.includes(m)) && ['admin', 'automation', 'create', 'destroy', 'avatar/use', 'redeem', 'save', 'claim', 'follow', 'message', 'update', 'publish', 'upload', 'lock', 'remove', 'clear', 'favorite', 'vote', 'check', 'report', 'scout_hub', 'shop', 'signup', 'support_email', 'support_ticket', 'accept', 'cancel', 'reject', 'comment', 'completed', 'failed', 'user_ticket', 'apply', 'view_information', 'address', 'listing/code', 'global_notification', 'notification', 'tos', 'treasure'].some(m => method.includes(m)))
		{
			httpMethod = 'POST';
		}
		else
		{
			url = `${url}?${qs.stringify(params)}`;
		}

		xhr.open(httpMethod, url);

		if (params instanceof FormData)
		{
			// For queries generated by <Form>
			xhr.send(params);
		}
		else if (method === 'GET')
		{
			xhr.send();
		}
		else
		{
			// For queries generated by _getLoaderFunction
			xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			xhr.send(qs.stringify(params));
		}
	});
}
